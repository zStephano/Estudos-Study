- Um objeto sempre será do Tipo de Referência, por este motivo, existe a diferença entre Classe e Structs. Para Orientação a Objetos, as Classes são mais utilizadas por todas as vantagens que nos dão pelo seu Tipo, por ser do Tipo de Referência, existe um maior dinamismo na utilização, reutilização, gerenciamento de estado, valor, referência e memória.

------------------------------------

# Encapsulamento:
O **encapsulamento** em C# é um conceito fundamental da **programação orientada a objetos**. Ele envolve ocultar a **implementação interna** de um objeto, permitindo o acesso apenas por meio de um conjunto **público de funções**. Vamos explorar isso mais detalhadamente:

1. **Modificadores de Acesso**:
   - **`public`**: Permite que membros (atributos e métodos) sejam acessados de qualquer lugar.
   - **`private`**: Restringe o acesso aos membros à própria classe.
   - **`protected`**: Permite o acesso aos membros pela própria classe e suas subclasses.

2. **Benefícios do Encapsulamento**:
   - **Segurança**: Protege o estado interno do objeto, evitando alterações acidentais.
   - **Flexibilidade**: Permite alterar a implementação sem afetar outras partes do código.
   - **Reutilização**: Facilita a criação de classes derivadas (herança).

3. **Exemplo**:
   ```csharp
   public class BankAccount
   {
       private double balance; // Atributo privado

       public void Deposit(double amount)
       {
           // Implementação do depósito
       }

       public double GetBalance()
       {
           return balance; // Método público para obter o saldo
       }
   }
   ```

Nesse exemplo, o saldo é encapsulado como privado, mas podemos acessá-lo usando o método `GetBalance()`. Isso protege o saldo de alterações diretas e fornece uma interface controlada para os usuários da classe⁴⁶.

------------------------------------

# Abstração:

**Abstração** na **programação orientada a objetos** (POO) é um conceito fundamental que permite aos programadores focar nas características e comportamentos essenciais de um objeto, ignorando detalhes não essenciais. Vamos explorar isso mais a fundo:

1. **Definição**:
   - A **abstração** envolve **modelar** os atributos e interações relevantes de entidades como **classes**, criando uma **representação abstrata** de um sistema.
   - Em outras palavras, é a capacidade de **simplificar** um objeto complexo, destacando apenas os aspectos importantes.

2. **Exemplo**:
   - Imagine uma **classe** chamada `InterestEarningAccount` que herda de uma classe base chamada `BankAccount`.
   - A `InterestEarningAccount` representa uma conta bancária que acumula juros no final de cada mês.
   - Essa classe herda o comportamento compartilhado da classe base (`BankAccount`) e adiciona funcionalidades específicas para contas de ganho de juros.

3. **Benefícios**:
   - **Foco**: Permite concentrar-se no que realmente importa para o sistema.
   - **Reutilização**: Evita duplicação de código, pois as classes derivadas herdam funcionalidades da classe base.
   - **Manutenção**: Facilita a atualização e expansão do sistema.

```csharp
public class InterestEarningAccount : BankAccount
{
    // Implementação específica para contas de ganho de juros
}
```

------------------------------------

# Herança:

**Herança** é um conceito fundamental na **programação orientada a objetos (POO)**, permitindo que os desenvolvedores criem relações hierárquicas entre classes. Vamos explorar mais detalhadamente:

1. **Definição**:
   - A **herança** permite que uma **classe derivada** (ou subclasse) **herde** membros (atributos e métodos) de uma **classe base** (ou superclasse).
   - A classe derivada reutiliza o código da classe base e pode adicionar seus próprios membros.

2. **Exemplo**:
   - Suponha que temos uma classe base chamada `Animal`.
   - Podemos criar classes derivadas como `Mammal` (mamífero) e `Reptile` (réptil).
   - Um `Mammal` é um `Animal`, e um `Reptile` também é um `Animal`.
   - Cada classe derivada representa uma especialização diferente da classe base.

3. **Benefícios**:
   - **Reutilização de Código**: Evita duplicação, pois a classe derivada herda membros da classe base.
   - **Extensibilidade**: Permite adicionar funcionalidades específicas à classe derivada.
   - **Hierarquia**: Cria uma estrutura organizada de classes.

Exemplo em C#:
```csharp
class Animal
{
    // Membros da classe base
}

class Mammal : Animal
{
    // Membros específicos para mamíferos
}

class Reptile : Animal
{
    // Membros específicos para répteis
}
```

A classe `ChangeRequest` no exemplo anterior herda de `WorkItem`, adicionando seus próprios membros. Isso ilustra como a herança permite criar especializações de classes. 

------------------------------------

# Polimorfismo:

**Polimorfismo** é um conceito fundamental na **programação orientada a objetos (POO)**, e é frequentemente chamado de terceiro pilar da POO, junto com **encapsulamento** e **herança**. Vamos explorar o que é e como funciona:

1. **Definição**:
   - **Polimorfismo** significa "de muitas formas" em grego.
   - Em tempo de execução, objetos de uma **classe derivada** podem ser tratados como objetos de uma **classe base**.
   - Isso ocorre quando o tipo declarado do objeto não é mais idêntico ao seu tipo de tempo de execução.
   - As classes base podem definir e implementar **métodos virtuais**, e as classes derivadas podem **substituí-los** com sua própria definição e implementação.

2. **Exemplo**:
   - Suponha que temos uma classe base chamada `Shape` e classes derivadas como `Circle`, `Rectangle` e `Triangle`.
   - Cada classe derivada tem seu próprio método `Draw()`, que desenha a forma específica.
   - Usando polimorfismo, podemos tratar todas as formas uniformemente, mesmo sem saber quais tipos específicos o usuário criará.

3. **Exemplo em C#**:
   ```csharp
   public class Shape
   {
       // Atributos e métodos comuns a todas as formas
       public virtual void Draw()
       {
           Console.WriteLine("Realizando tarefas de desenho da classe base");
       }
   }

   public class Circle : Shape
   {
       public override void Draw()
       {
           Console.WriteLine("Desenhando um círculo");
           base.Draw();
       }
   }

   // Classes Rectangle e Triangle seguem o mesmo padrão

   // Exemplo de uso:
   List<Shape> shapes = new List<Shape>
   {
       new Circle(),
       new Rectangle(),
       new Triangle()
   };

   foreach (var shape in shapes)
   {
       shape.Draw();
   }
   ```

Nesse exemplo, o método `Draw()` é invocado em todas as formas, independentemente do tipo específico. Isso demonstra o poder do polimorfismo.

------------------------------------

# Modificadores de Acesso:

Claro! Vamos falar sobre **modificadores de acesso** em **C#**. Esses modificadores são palavras-chave que determinam a **acessibilidade declarada** de um membro ou tipo. Aqui estão os quatro principais modificadores de acesso:

1. **`public`**:
   - O acesso não é restrito.
   - Membros públicos podem ser acessados de qualquer lugar (dentro ou fora da classe).
   - Exemplo: Um método público em uma classe pode ser chamado de qualquer lugar.

2. **`protected`**:
   - O acesso é limitado à **classe que os contém** ou aos **tipos derivados** dessa classe.
   - Membros protegidos não são acessíveis fora dessa hierarquia.
   - Exemplo: Um método protegido em uma classe base pode ser usado por suas subclasses.

3. **`internal`**:
   - O acesso é limitado ao **assembly atual** (o conjunto de arquivos compilados).
   - Membros internos não são visíveis fora desse assembly.
   - Exemplo: Uma classe interna só pode ser usada dentro do mesmo assembly.

4. **`private`**:
   - O acesso é limitado ao **tipo recipiente** (a própria classe).
   - Membros privados não são acessíveis fora dessa classe.
   - Exemplo: Um campo privado só pode ser acessado dentro da classe que o declara.

Além desses, há outros níveis de acessibilidade, como **`protected internal`** (combinação de protegido e interno) e **`private protected`** (acesso protegido dentro do assembly atual). Esses modificadores permitem maior flexibilidade na modelagem de classes e herança¹⁴.

------------------------------------

# Tipos complexos:

Em **C#**, os **tipos complexos** referem-se a estruturas de dados mais elaboradas, como **classes** e **estruturas**. Vamos explorar esses conceitos:

1. **Classes**:
   - Uma **classe** é um **modelo** para criar objetos.
   - Ela define **atributos** (campos) e **comportamentos** (métodos) que os objetos desse tipo terão.
   - Exemplo:
     ```csharp
     class Person
     {
         public string Name { get; set; }
         public int Age { get; set; }
     }
     ```

2. **Estruturas**:
   - Uma **estrutura** é semelhante a uma classe, mas é **mais leve** em termos de alocação de memória.
   - Ela é usada para representar tipos de valor.
   - Exemplo:
     ```csharp
     struct Point
     {
         public int X { get; set; }
         public int Y { get; set; }
     }
     ```

3. **Interfaces**:
   - Uma **interface** define um **contrato** que as classes devem seguir.
   - Ela especifica **métodos** que as classes devem implementar.
   - Exemplo:
     ```csharp
     interface ILogger
     {
         void Log(string message);
     }
     ```

4. **Herança**:
   - A **herança** permite que uma classe **herde** membros de outra classe.
   - Uma classe derivada pode estender ou modificar o comportamento da classe base.
   - Exemplo:
     ```csharp
     class Student : Person
     {
         public int StudentId { get; set; }
     }
     ```

Esses conceitos são fundamentais para a programação orientada a objetos em C#.

------------------------------------

# Propriedades

Em **C#**, as **propriedades** são uma parte essencial da **programação orientada a objetos** (POO). Elas permitem que você defina **métodos de acesso** para atributos de uma classe, garantindo um controle mais preciso sobre como esses atributos são lidos e gravados. Vamos explorar mais detalhadamente:

1. **O que são propriedades?**
   - As propriedades são **membros especiais** de uma classe que encapsulam o acesso a campos (variáveis) privados.
   - Elas fornecem uma **interface pública** para ler e gravar valores em atributos internos.

2. **Sintaxe de propriedade**:
   - Uma propriedade é definida usando os **métodos acessadores** `get` e `set`.
   - Exemplo:
     ```csharp
     public class Person
     {
         private string name;

         public string Name
         {
             get { return name; } // Método de leitura
             set { name = value; } // Método de gravação
         }
     }
     ```

3. **Benefícios das propriedades**:
   - **Encapsulamento**: Você pode controlar o acesso aos atributos internos.
   - **Validação**: Pode adicionar lógica de validação nos métodos `set`.
   - **Sintaxe amigável**: Propriedades são usadas como campos, mas com métodos por trás dos panos.

4. **Exemplo de uso**:
   ```csharp
   var person = new Person();
   person.Name = "Alice"; // Define o valor usando o método set
   Console.WriteLine(person.Name); // Obtém o valor usando o método get
   ```

As propriedades são uma maneira elegante de gerenciar atributos em C#.

------------------------------------

# Métodos

Em **C#**, **métodos** são blocos de código que executam uma tarefa específica. Eles são essenciais na **programação orientada a objetos (POO)** e permitem que você defina comportamentos para suas classes. Vamos explorar os conceitos relacionados aos métodos:

1. **Definição de Método**:
   - Um **método** é uma função associada a uma classe ou estrutura.
   - Ele pode ter **parâmetros** (dados de entrada) e **um valor de retorno** (dados de saída).
   - Exemplo:
     ```csharp
     public class Calculator
     {
         public int Add(int a, int b)
         {
             return a + b;
         }
     }
     ```

2. **Assinatura do Método**:
   - A **assinatura** de um método inclui seu **nome**, **parâmetros** e **tipo de retorno**.
   - Exemplo:
     ```csharp
     public int Multiply(int x, int y)
     {
         return x * y;
     }
     ```

3. **Sobrecarga de Método**:
   - Você pode ter **múltiplos métodos com o mesmo nome**, mas com **parâmetros diferentes**.
   - Isso é chamado de **sobrecarga**.
   - Exemplo:
     ```csharp
     public double CalculateArea(double radius)
     {
         // Cálculo da área de um círculo
     }

     public double CalculateArea(double length, double width)
     {
         // Cálculo da área de um retângulo
     }
     ```

4. **Chamando Métodos**:
   - Para usar um método, você cria uma instância da classe e chama o método.
   - Exemplo:
     ```csharp
     var calc = new Calculator();
     int sum = calc.Add(5, 3); // Chama o método Add
     ```
5. **Sobrescrita de Método**:
	- Na **programação orientada a objetos (POO)** em **C#**, a **sobrescrita de métodos** é um recurso poderoso que permite que uma **subclasse** (ou classe filha) forneça uma **implementação específica** para um método que já é fornecido por uma de suas **superclasses** (ou classes pai). Vamos explorar como isso funciona:

1. **Modificadores de Acesso**:
   - Para habilitar a sobrescrita, marcamos um método ou propriedade como **`virtual`** na classe base.
   - O modificador `virtual` indica que o método pode ser **sobrescrito** nas classes derivadas.

2. **Palavra-chave `override`**:
   - Quando queremos substituir um método da classe base, usamos a palavra reservada **`override`**.
   - Isso indica que estamos fornecendo uma nova implementação para o método.

3. **Exemplo**:
   Suponha que temos uma classe base chamada `Garrafa` com um método `Finalidade()`:

   ```csharp
   public class Garrafa
   {
       public virtual void Finalidade()
       {
           Console.WriteLine("Garrafa genérica");
       }
   }
   ```

   Agora, queremos criar uma classe derivada chamada `GarrafaTermica` com uma finalidade diferente:

   ```csharp
   public class GarrafaTermica : Garrafa
   {
       public override void Finalidade()
       {
           Console.WriteLine("Manter a temperatura");
       }
   }
   ```

   Ao chamar o método `Finalidade()` em uma instância de `GarrafaTermica`, obtemos a saída:

   ```
   Garrafa genérica
   Manter a temperatura
   ```

4. **Chamando o Método da Classe Base**:
   - Se precisarmos executar o método da classe base dentro da sobrescrita, usamos a palavra reservada **`base`**.
   - Isso nos permite combinar a funcionalidade da classe base com a da classe derivada.

A sobrescrita de métodos é uma maneira poderosa de personalizar o comportamento das classes em C#.

------------------------------------

# Using e Dispose

A instrução `using` em **C#** é uma ferramenta poderosa para garantir o uso correto de objetos descartáveis. Vamos explorar como ela funciona:

1. **Objetos Descartáveis**:
   - Alguns objetos, como arquivos, conexões de banco de dados ou recursos de rede, precisam ser **liberados explicitamente** quando não são mais necessários.
   - A interface `IDisposable` é usada para indicar que um objeto é descartável.

2. **Instrução `using`**:
   - A instrução `using` garante que uma instância `IDisposable` seja **descartada** corretamente.
   - Ela cria um **escopo limitado** onde o objeto é usado e, ao sair desse escopo, o objeto é automaticamente liberado.
   - Exemplo:
     ```csharp
     using (StreamReader reader = File.OpenText("numbers.txt"))
     {
         // Process file content
     }
     ```

3. **Sobrescrita de Métodos `Dispose`**:
   - Classes que implementam `IDisposable` devem ter um método `Dispose()` para liberar recursos.
   - O método `Dispose()` é chamado automaticamente quando o escopo da instrução `using` é encerrado.
   - Exemplo:
     ```csharp
     public class AsyncDisposableExample : IAsyncDisposable
     {
         public async ValueTask DisposeAsync()
         {
             // Libera recursos assincronamente
         }
     }
     ```

4. **Observações**:
   - Use `await using` para objetos assíncronos.
   - Variáveis declaradas em uma instrução `using` são **somente leitura**.
   - Variáveis são descartadas na ordem inversa da declaração.
   - Evite usar uma variável descartável após sair do escopo da instrução `using`.

Agora você está pronto para usar a instrução `using` de forma eficaz em seus projetos C#!

------------------------------------

# Classes estáticas:

Em **C#**, uma **classe estática** é uma classe que não pode ser instanciada. Isso significa que você não pode usar o operador `new` para criar uma variável do tipo dessa classe. No entanto, as classes estáticas são úteis como contêineres para conjuntos de **métodos estáticos** que operam apenas em parâmetros de entrada e não precisam obter ou definir campos de instância interna⁴.

Aqui estão os principais pontos sobre classes estáticas:

1. **Membros Estáticos**:
   - Uma classe estática contém apenas **membros estáticos** (métodos e atributos).
   - Esses membros são acessados usando o próprio nome da classe, sem a necessidade de criar uma instância.
   - Exemplo:
     ```csharp
     public static class UtilityClass
     {
         public static void MethodA()
         {
             // Implementação do método
         }
     }
     ```

2. **Vantagens**:
   - **Compilação Segura**: O compilador verifica se nenhum membro de instância é adicionado acidentalmente.
   - **Garantia de Não Instanciação**: As classes estáticas não podem ser instanciadas, evitando erros de uso.

3. **Exemplo de Uso**:
   ```csharp
   UtilityClass.MethodA(); // Chama o método estático
   ```

Lembre-se de que as classes estáticas são seladas e não podem ser herdadas. Elas são úteis quando você precisa agrupar métodos que não dependem de um objeto específico.

------------------------------------

# Classes seladas:

Em **C#**, uma **classe selada** é uma classe que não pode ser **estendida** por outras classes. Ou seja, ela impede que outras classes herdem dela. Vamos entender melhor o conceito e quando utilizá-lo:

1. **Modificador `sealed`**:
   - O modificador `sealed` é usado para tornar uma classe selada.
   - Uma classe selada não pode ser usada como base para outras classes.

2. **Motivações para o uso de classes seladas**:
   - Algumas classes não foram projetadas para serem customizadas ou estendidas de formas diferentes.
   - Por exemplo, em bibliotecas ou APIs, você pode querer manter um padrão consistente para determinados tipos de objetos, como notificações de erro.
   - Ao selar uma classe, você garante que sua funcionalidade permaneça inalterada e previsível para os consumidores.

3. **Exemplo**:
   ```csharp
   public sealed class Notification
   {
       // Implementação da classe selada
   }
   ```

   Se alguém tentar criar uma nova classe derivada de `Notification`, receberá um erro.

4. **Benefícios**:
   - Evita que outras classes modifiquem ou estendam a classe selada.
   - Mantém a consistência e a previsibilidade em APIs e bibliotecas.

Lembre-se de usar classes seladas com cuidado, pois elas restringem a flexibilidade de herança. 

------------------------------------

# Partial Classes:

Em **C#**, uma **classe parcial** permite dividir a definição de uma classe em **dois ou mais arquivos de origem**. Cada arquivo contém uma parte da definição da classe, e todas as partes são combinadas quando o aplicativo é compilado⁴.

Aqui estão os principais pontos sobre classes parciais:

1. **Motivações para o uso de classes parciais**:
   - **Colaboração**: Declarar uma classe em arquivos separados permite que vários programadores trabalhem nela simultaneamente.
   - **Extensibilidade**: Você pode adicionar código à classe sem precisar recriar o arquivo de origem que inclui a origem gerada automaticamente.
   - **Integração com ferramentas**: O Visual Studio usa classes parciais para criar Windows Forms, código de wrapper de serviço Web e outros artefatos.

2. **Sintaxe de classe parcial**:
   - Use o modificador de palavra-chave **`partial`** para indicar que outras partes da classe podem ser definidas no mesmo namespace.
   - Todas as partes devem usar a palavra-chave `partial`.
   - Todas as partes devem ter a mesma acessibilidade (como `public`, `private`, etc.).

3. **Exemplo**:
   ```csharp
   public partial class Employee
   {
       public void DoWork()
       {
           // Implementação do método
       }
   }

   public partial class Employee
   {
       public void GoToLunch()
       {
           // Implementação do método
       }
   }
   ```

   Nesse exemplo, a classe `Employee` é dividida em duas partes, permitindo que diferentes membros sejam definidos em arquivos separados.

As classes parciais são úteis para manter a organização e colaboração em projetos maiores.

------------------------------------

# Interfaces:

As **interfaces** em **C#** são uma parte fundamental da **programação orientada a objetos** (POO). Elas permitem definir um **contrato** que as classes devem seguir. Vamos explorar os conceitos relacionados às interfaces:

1. **Definição de Interface**:
   - Uma **interface** declara um conjunto de **métodos**, **propriedades** ou **eventos** sem implementação.
   - Ela especifica **o que fazer**, mas não **como fazer**.
   - Exemplo:
     ```csharp
     public interface IVehicle
     {
         void Start();
         void Stop();
     }
     ```

2. **Implementação de Interface**:
   - Uma classe ou estrutura que **implementa** uma interface deve fornecer uma **implementação** para cada membro declarado pela interface.
   - Exemplo:
     ```csharp
     public class Car : IVehicle
     {
         public void Start()
         {
             // Implementação para iniciar o carro
         }

         public void Stop()
         {
             // Implementação para parar o carro
         }
     }
     ```

3. **Benefícios das Interfaces**:
   - **Abstração**: Permite definir contratos comuns para várias classes.
   - **Flexibilidade**: Uma classe pode implementar várias interfaces.
   - **Organização do Código**: Ajuda a seguir os princípios SOLID e a manter o código organizado.

4. **Exemplo de Uso**:
   ```csharp
   IVehicle vehicle = new Car();
   vehicle.Start();
   vehicle.Stop();
   ```

As interfaces são poderosas para abstração e definir contratos entre classes.

------------------------------------

# Upcast e Downcast:

1. **Upcast**:
   - O **upcast** é a conversão de um objeto de uma **classe derivada** para um objeto de sua **classe base**.
   - Basicamente, você trata um objeto de uma classe derivada como se fosse um objeto da classe base.
   - Isso é feito implicitamente, sem a necessidade de conversão explícita.
   - Exemplo:
     ```csharp
     Animal snake = new Snake(); // Upcast
     ```

2. **Downcast**:
   - O **downcast** é a conversão de um objeto de uma **classe base** para um objeto de sua **classe derivada**.
   - Isso é feito explicitamente, usando a palavra-chave `as` ou `(TipoDaClasseDerivada)`.
   - Um downcast só é válido se o objeto for compatível com a classe derivada.
   - Exemplo:
     ```csharp
     Animal animal = new Snake();
     Snake snake = animal as Snake; // Downcast
     ```

3. **Cuidados**:
   - O downcast pode causar exceções em tempo de execução se o objeto não for do tipo esperado.
   - Use o downcast com cuidado e verifique se o objeto é realmente da classe derivada antes de convertê-lo.

Em resumo, o upcast permite tratar uma classe derivada como sua classe base, enquanto o downcast permite converter uma classe base de volta para sua classe derivada.

------------------------------------
