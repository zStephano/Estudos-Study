## Linguagem de Programação com C#

# Namespace
- Enquanto as pastas são as divisões físicas, os namespaces são as divisões lógicas de um projeto.  Assim como não podemos ter dois arquivos com o mesmo nome nas pastas, não podemos ter duas classes com o mesmo nome em um namespace.
- O ideal é ter apenas um namespace e uma classe por arquivo.
- O escopo de um namespace é definido entre CHAVES assim como classes e métodos.
- Um namespace pode ser reutilizado podendo estar presente em diversos arquivos.
- É possível criar quantos namespaces quisermos. Os namespaces não devem conter espaços ou caracteres especiais.
- Toda palavra do namespace começa com letra maiúscula.
- Podemos ter um namespace dentro de outro usando o "." como separador.
- Durante a execução, todos os arquivos do C# serão unificados, assim, a divisão física se perderá. Sobrará apenas a divisão lógica que são os namespaces.

# Using
- Importações definem as bibliotecas que nosso programa irá utilizar. Por padrão, só o básico vem incluso.
- Precisamos importar o que desejamos para poder trabalhar. Isto é feito no começo do programa onde utilizamos a palavra reservada USING para isto.
- Organizar nosso código em pastas e namespaces é fundamental. Em aplicações grande o volume de código é alto, a quantidade de arquivos é alta e o número de pessoas trabalhando no mesmo projeto também.
- Entender bem esta organização é fundamental. Use e abuse da criação de arquivos e namespaces.

# Variáveis
- Uma variável é algo que utilizamos para armazenar uma informação.
- Ser variável significa que seu valor pode ser alterado a qualquer momento, ou seja, ele pode variar.
- Sempre que criamos uma variável, dizimos que estamos iniciliazando/instanciando ela.
- Podemos usar um TIPO ou palavra reservada VAR para cirar uma variável.
- No C# o tipo vem sempre antes do nome da variável, podemos informar um valor já na criação da variável. Se não informado, o valor padrão será aplicado.
- Utilize nomes coesos com o que a variável representa, seja mais específico, isso facilita a expressividade do código.
- Não utilize caracteres especiais ou espaços.
- Não comece com números.
- A primeira letra de cada variável é SEMPRE minúscula.

# Constantes
- A diferença de variável e a constante é que a constante tem o tipo e valor dela definido e fixo, ou seja, não pode ser alterada no decorrer da execução do código.
- Uma vez criadas, somos obrigados a atribuir um valor.
- Não funcionam com a utilização de VAR, mas sim CONST.
- São mais otimizadas que as variáveis.
- Recomendadas para usos frequentes quando não houver variação nas suas informações.
- Caso não seja informado um valor, o valor padrão será atribuído.
- Utilize nomes coesos com o que a variável representa, seja mais específico, isso facilita a expressividade do código.
- Não utilize caracteres especiais ou espaços.
- Não comece com números.
- É comum vermos constantes todas em maiúscula, separadas por "_", mas não é via de regra.

# Nomes Reservados ou Key Words
- São palavras de uso exclusivo do C#.
- Não podemos utilizar como nomes de variáveis ou constantes.

# Comentários
- Comentários são extremamente úteis e necessários para auxiliar na expressividade do código de tal forma a ajudar e muito para quando outras pessoas forem mexer no código, poderem compreender ainda melhor o que está sendo executado em determinada parte do código. Isso facilita e muito a compreensão do código como um todo.
- Não é executada pelo programa.
- Podemos utilizar em linhas que não desejamos executar.
- Podemos ter comentários de uma linha, múltiplas linhas e XML (Metadata).
- Exemplos:
	// Uma linha
	/*
		multiplas linhas
	*/
	/// XML

# Tipos Primitivos ou Built-in-Types
- São tipos base cujo outros tipos (complexos) irão derivar.
- Definir o tipo correto otimiza a execução do programa.
- São chamados de Tipo de Valor.
- Armazenam o valor e não a referência para um item na memória.
- São classificados em:
	- Tipos Simples (Simple Types)
	- Enumerables (Enums)
	- Estruturas (Structs)
	- Tipos Nulos (Nullable Types)
- Cada tipo possui uma capacidade, caso essa capacidade exceda, o programa gera um erro.
- Esta capacidade pré-definida ajuda a otimização do seu programa.


# System
- No .NET tudo começa de um tipo base chamado SYSTEM. Todo e qualquer tipo, seja built-in ou complexo deriva dele. Ele é a base de todos os objetos no .NET. Não precisamos nos preocupar em usá-lo ou qualquer coisa similar, seu uso já é implicito.

# Byte
- O tipo byte é utilizado para representar um byte de fato. Em diversos casos, precisamos da cadeia de bytes de um arquivo por exemplo, também é chamado de byte array.
Também temos o sbyte que permite valores negativos.
- Byte (8-bit) vai de 0 até 255.
- SByte (8-bit) vai de -128 a 127.

# Números inteiros
- Números inteiros são números sem pontuação, estes são definidos pelos tipos SHORT/USHORT, INT/UINT, LONG/ULONG.
- Assim como temos signed nos bytes, nos números por padrão são permitidos valores negativos, então o UNSIGNED é utilizado para definir que o mesmo não pode receber valores negativos.

# Números reais
- Números reais são números que possuem pontuação, estes são definidos pelos tipos FLOAT(32-bit), DOUBLE(64-bit), DECIMAL(128-bit).
- Por padrão, possuem assimilação negativa e positiva, dispensando o uso do SIGNED/UNSIGNED em seus tipos.

# Booleano
- O tipo bool armazena apenas TRUE ou FALSE, definido pela palavra BOOL. Seu tamanho é 8-bit.

# Char
- Utilizado para armazenas apenas e somente um caractere no formato Unicode, definido pela palavra reservada CHAR. Sua atribuição é dada por aspas simples. Seu tamanho é de 16-bit.

# String
- Armazena uma cadeia de caracteres. Podemos pensar nele como uma lista de CHAR, sendo definido pela palavra reservada string. Sua atribuição é dada por aspas duplas.

# Var
- Substitui o nome de um tipo. Será do tipo do primeiro valor atribuído.

# Object
- Tipo genérico que recebe qualquer valor ou objeto. Caso não saiba o tipo da informação ou ela seja de vários tipos diferentes.
- Não possui intelisente (ajuda dos editores) por ser um tipo desconhecido.

# Nullable
- Diferente do zero ou string vazia. Podemos atribuir NULL a um objeto desde que o mesmo seja marcado como nullable usando interrogação na frente do tipo.
- Todo tipo primitivo pode ser Nullable.
- Se uma chamada a um valor nulo for feita um erro será apresentado.

# Alias
- Alias é um apelido que todo tipo no .NET tem, por exemplo: System.String tem o alias STRING.
- Como o C# é case sensitive, tanto faz escrevermos um ou outro, porém, é recomendado sempre usar o ALIAS.

# Conversão Implícita
- É comum precisarmos tranformar um dado de tipo X para o tipo Y. Para isso, existem dois tipos de conversão, as implícitas e as explícitas.
- As implícitas são conversões que podem ser executadas apenas com passagem de dados, possuem tipos compatíveis.
- A conversão implícita só ocorre se os tipos forem compatíveis, exemplo: FLOAT não cabe em INT mas INT cabe em FLOAT.

# Conversão Explícita
- Ocorre quando os tipos não são compatíveis. É dada pelo uso do tipo entre parênteses antes da atribuição.

# Parse
- Diferente da conversão implícita e da conversão explícita, o Parse realiza a transcrição da variável de um carectere ou string para outro tipo qualquer que seja compatível com o dado esperado, exeplo: int inteiro = int.Parse("100").
- O método Parse é um método estático das classes numéricas (como int, double, decimal, etc.) e da classe DateTime. Ele é usado para converter uma string em uma instância do tipo apropriado.
- Use Parse quando você sabe que está lidando com uma string que precisa ser convertida para um tipo específico e você quer validar estritamente o formato da string.

# Convert
- Diferente do Parse, o Convert permite converter vários tipos de valor, não apenas string.
- O método Convert faz parte da classe Convert e é utilizado para converter um tipo de dado em outro. Ele é mais flexível e suporta a conversão entre muitos tipos diferentes.
- Use Convert quando você precisa de flexibilidade ou quando está lidando com valores que podem ser nulos ou quando você está lidando com um objeto que pode ser de diferentes tipos.

# Operações Aritméticas
- Multiplicação e divisão são executadas primeiro.
- Caso queira executar em outra ordem, usar parênteses.
- Aceita shor, int, float, double e decimal.
- Em caso de uso de números interiros: Se o valor for real, será arredondado.
	Exemplo: resultado 4.4 => 5.

# Operadores de Atribuição
- Utilizamos igual para atribuir um valor. Porém, podemos utilizar igual junto a um operador aritético.
	Exemplo: x += 5 é o mesmo que x = x + 5.

# Operadores de Comparação
- Podemos comparar qualquer tipo de dado. A comparação sempre retorna verdadeiro ou falso.
- As definições de comparadores são:
	- Igual => ==
	- Diferente => !=
	- Maior que => >
	- Menor que => <
	- Maior ou igual a => >=
	- Menor ou igual a => <=

# Operadores Lógicos
- Usados para operações condicionais, assim, retornando sempre verdadeiro ou falso. Suas definições são:
	- E - and => &&
	- Ou - or => ||
	- Negação - not => !
	
# Operador Condicional: IF
- Representando "SE", ou seja "caso alguma condição seja atendida". Utilizado para tomada de decisões e também utiliza operadores lógicos.
- Complemento ao IF, caso a condição não seja atendida, podemos ter o ELSE IF "Se não se" - não tem limites (usar com cuidado).
- Podemos usar apenas o ELSE para executar algo caso a condição principal não seja atendida.

# Estrutura Condicional: SWITCH
- Utilizado quando temos muitas condições de forma a ser executado em cascata. Devemos parar manualmente a execução com o comando BREAK.
- Possui uma execução padrão chamada DEFAULT.

# Laços de Repetição FOR
- Tradução "para", ou seja, para cada item em um valor. Executa uma determinada ação várias vezes, definido pela palavra FOR.
- Exige 3 parâmetros:
	- Contador;
	- Condição;
	- Incremento.

# Laços de Repetição: WHILE
- Tradução "enquanto", ou seja, enquanto uma condição for verdadeira. Definido pela palavra WHILE.
- Exige apenas uma condição. Checa a condição ANTES de executar.

# Laços de Repetição: DO
- Tradução "faça", ou seja, realiza uma ação enquanto. Definido pela palavra DO/WHILE.
- Exige apenas uma condição do WHILE.
- Checa a condição DEPOIS de executar.

# Métodos ou Funções
- Podemos segmentar nosso programa em funções, também conhecidos como métodos.
- O MAIN é um exemplo de método.
- Possui um retorno, um nome e parâmetros.
- Esta composição é camada de assinatura.
- Começam sempre com Maiúscula.

# Tipos de Referência (Reference Type) e Tipos de Valor (Value Type)
- A memória é dividida em duas partes, Heap e Stack.
- Heap armazena DADOS.
- Stack armazena referência para os dados.
- Qualquer tipo no .NET é tratado como:
	- Tipo de Referência (Reference Type);
	- Tipo de Valor (Value Type).

- Tipos de Valor
1 - Armazenamento na Memória:
Tipos de valor armazenam os dados diretamente na stack (pilha).
A stack é uma área de memória de acesso rápido e com vida curta, que armazena variáveis locais e chamadas de função.

2 - Cópia de Dados:
Quando um tipo de valor é atribuído a outra variável, uma cópia dos dados é feita. As duas variáveis operam independentemente.

3 - Tipos Comuns:
int, float, double, decimal, bool, char, structs, enum.

- Tipos de Referência

1 - Armazenamento na Memória:
Tipos de referência armazenam uma referência (endereço de memória) para os dados que são armazenados no heap (monte).
O heap é uma área de memória maior e mais lenta, mas que pode armazenar dados por mais tempo (duração da aplicação).

2 - Cópia de Referências:
Quando um tipo de referência é atribuído a outra variável, ambas as variáveis referenciam o mesmo objeto na memória. Mudanças feitas através de uma variável afetam o objeto referenciado por ambas.

3 - Tipos Comuns:
class, interface, delegate, object, string, arrays.

Resumo das diferenças:

Característica - Tipos de Valor:
Armazenamento: Stack
Cópia: Cópia de valor
Mutabilidade: Independente após cópia
Desempenho: Geralmente mais rápido
Exemplos: int, double, struct, bool...

Característica - Tipos de Referência:
Armazenamento: Heap
Cópia: Cópia de referência
Mutabilidade: Mutável através de qualquer referência
Desempenho: Pode ser mais lento
Exemplos: class, string, array, delegate...

- Quando usar cada um:

- Tipos de Valor: Use para dados pequenos, simples e que devem ser imutáveis após a cópia. Exemplos incluem coordenadas, cores, números. Stack: Use para dados temporários, como variáveis locais e parâmetros de método. Adequado para dados que têm vida útil curta e conhecida.

- Tipos de Referência: Use para objetos complexos, grandes ou que devem ser compartilhados e modificados por diferentes partes do código. Exemplos incluem objetos de negócios, entidades de banco de dados, strings. Heap: Use para objetos que precisam ser acessíveis de diferentes partes do programa e que podem ter uma vida útil mais longa e indeterminada.