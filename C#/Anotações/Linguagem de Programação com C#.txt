## Linguagem de Programação com C#

# Namespace
- Enquanto as pastas são as divisões físicas, os namespaces são as divisões lógicas de um projeto.  Assim como não podemos ter dois arquivos com o mesmo nome nas pastas, não podemos ter duas classes com o mesmo nome em um namespace.
- O ideal é ter apenas um namespace e uma classe por arquivo.
- O escopo de um namespace é definido entre CHAVES assim como classes e métodos.
- Um namespace pode ser reutilizado podendo estar presente em diversos arquivos.
- É possível criar quantos namespaces quisermos. Os namespaces não devem conter espaços ou caracteres especiais.
- Toda palavra do namespace começa com letra maiúscula.
- Podemos ter um namespace dentro de outro usando o "." como separador.
- Durante a execução, todos os arquivos do C# serão unificados, assim, a divisão física se perderá. Sobrará apenas a divisão lógica que são os namespaces.

# Using
- Importações definem as bibliotecas que nosso programa irá utilizar. Por padrão, só o básico vem incluso.
- Precisamos importar o que desejamos para poder trabalhar. Isto é feito no começo do programa onde utilizamos a palavra reservada USING para isto.
- Organizar nosso código em pastas e namespaces é fundamental. Em aplicações grande o volume de código é alto, a quantidade de arquivos é alta e o número de pessoas trabalhando no mesmo projeto também.
- Entender bem esta organização é fundamental. Use e abuse da criação de arquivos e namespaces.

# Variáveis
- Uma variável é algo que utilizamos para armazenar uma informação.
- Ser variável significa que seu valor pode ser alterado a qualquer momento, ou seja, ele pode variar.
- Sempre que criamos uma variável, dizimos que estamos iniciliazando/instanciando ela.
- Podemos usar um TIPO ou palavra reservada VAR para cirar uma variável.
- No C# o tipo vem sempre antes do nome da variável, podemos informar um valor já na criação da variável. Se não informado, o valor padrão será aplicado.
- Utilize nomes coesos com o que a variável representa, seja mais específico, isso facilita a expressividade do código.
- Não utilize caracteres especiais ou espaços.
- Não comece com números.
- A primeira letra de cada variável é SEMPRE minúscula.

# Constantes
- A diferença de variável e a constante é que a constante tem o tipo e valor dela definido e fixo, ou seja, não pode ser alterada no decorrer da execução do código.
- Uma vez criadas, somos obrigados a atribuir um valor.
- Não funcionam com a utilização de VAR, mas sim CONST.
- São mais otimizadas que as variáveis.
- Recomendadas para usos frequentes quando não houver variação nas suas informações.
- Caso não seja informado um valor, o valor padrão será atribuído.
- Utilize nomes coesos com o que a variável representa, seja mais específico, isso facilita a expressividade do código.
- Não utilize caracteres especiais ou espaços.
- Não comece com números.
- É comum vermos constantes todas em maiúscula, separadas por "_", mas não é via de regra.

# Nomes Reservados ou Key Words
- São palavras de uso exclusivo do C#.
- Não podemos utilizar como nomes de variáveis ou constantes.

# Comentários
- Comentários são extremamente úteis e necessários para auxiliar na expressividade do código de tal forma a ajudar e muito para quando outras pessoas forem mexer no código, poderem compreender ainda melhor o que está sendo executado em determinada parte do código. Isso facilita e muito a compreensão do código como um todo.
- Não é executada pelo programa.
- Podemos utilizar em linhas que não desejamos executar.
- Podemos ter comentários de uma linha, múltiplas linhas e XML (Metadata).
- Exemplos:
	// Uma linha
	/*
		multiplas linhas
	*/
	/// XML

# Tipos Primitivos ou Built-in-Types
- São tipos base cujo outros tipos (complexos) irão derivar.
- Definir o tipo correto otimiza a execução do programa.
- São chamados de Tipo de Valor.
- Armazenam o valor e não a referência para um item na memória.
- São classificados em:
	- Tipos Simples (Simple Types)
	- Enumerables (Enums)
	- Estruturas (Structs)
	- Tipos Nulos (Nullable Types)
- Cada tipo possui uma capacidade, caso essa capacidade exceda, o programa gera um erro.
- Esta capacidade pré-definida ajuda a otimização do seu programa.


# System
- No .NET tudo começa de um tipo base chamado SYSTEM. Todo e qualquer tipo, seja built-in ou complexo deriva dele. Ele é a base de todos os objetos no .NET. Não precisamos nos preocupar em usá-lo ou qualquer coisa similar, seu uso já é implicito.

# Byte
- O tipo byte é utilizado para representar um byte de fato. Em diversos casos, precisamos da cadeia de bytes de um arquivo por exemplo, também é chamado de byte array.
Também temos o sbyte que permite valores negativos.
- Byte (8-bit) vai de 0 até 255.
- SByte (8-bit) vai de -128 a 127.

# Números inteiros
- Números inteiros são números sem pontuação, estes são definidos pelos tipos SHORT/USHORT, INT/UINT, LONG/ULONG.
- Assim como temos signed nos bytes, nos números por padrão são permitidos valores negativos, então o UNSIGNED é utilizado para definir que o mesmo não pode receber valores negativos.

# Números reais
- Números reais são números que possuem pontuação, estes são definidos pelos tipos FLOAT, DOUBLE, DECIMAL.
- Por padrão, possuem assimilação negativa e positiva, dispensando o uso do SIGNED/UNSIGNED em seus tipos.

# Booleano
- O tipo bool armazena apenas TRUE ou FALSE, definido pela palavra BOOL. Seu tamanho é 8-bit.

# Char
- Utilizado para armazenas apenas e somente um caractere no formato Unicode, definido pela palavra reservada CHAR. Sua atribuição é dada por aspas simples. Seu tamanho é de 16-bit.

# String
- Armazena uma cadeia de caracteres. Podemos pensar nele como uma lista de CHAR, sendo definido pela palavra reservada string. Sua atribuição é dada por aspas duplas.

# Var
- Substitui o nome de um tipo. Será do tipo do primeiro valor atribuído.

# Object
- Tipo genérico que recebe qualquer valor ou objeto. Caso não saiba o tipo da informação ou ela seja de vários tipos diferentes.
- Não possui intelisente (ajuda dos editores) por ser um tipo desconhecido.

# Nullable
- Diferente do zero ou string vazia. Podemos atribuir NULL a um objeto desde que o mesmo seja marcado como nullable usando interrogação na frente do tipo.
- Todo tipo primitivo pode ser Nullable.
- Se uma chamada a um valor nulo for feita um erro será apresentado.