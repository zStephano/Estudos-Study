## Linguagem e Compiladores

#Linguagens de Programação:
É a forma como dizemos para a máquina/computador executar algo;
Computadores não falam nossa língua, e sim, binário (linguagem de máquina);
A Linguagem de Programação faz o intermédio da comunicação entre Humano x Máquina;
O processo de tradução é feito através da Compilação do Código, por esse motivo, cada linguagem possui seu próprio compilador.

#Linguagem de Alto e Baixo Nível:
As instruções enviadas a máquina, são instruições a nível de máquina;
Quanto mais detalhedas e/ou específicas as instruções de acordo com a necessidade, mais baixo é o nível devido a profundidade;
Linguagens de Programação como C#, Java, PHP, Dart, TypeScript, entre outras são consideradas de Alto Nível. Linguagens de alto nível favorecem e facilitam a adaptabilidade e usabilidade do Programador do que para a própria máquina;
Linguagens de baixo nível são mais complexas devido estar mais próximo da linguagem da máquina, o que a torna mais funcional e legível para a própria máquina. O contrário se aplica para linguagens de Alto Nível;
As linguagens de alto nível já fornecem um acesso à tudo que precisamos a nível de hardware de forma pronta.

#Linguagem compilada, interpretada e híbrida:
A linguagem compilada consiste em receber um arquivo de texto (alto nível) e traduzi-la para binário (nível de máquina);
A linguagem interpretada não precisa de algo para compila-la, ela pode ser lida diretamente. Essa interpretação é feito em tempo real ou tempo de execução.
	*Tempo de Execução é o que acontece durante a execução do código pelo computador ou interpretador.
A linguagem híbrida combina características de ambas, tanto compiladas quanto interpretadas. Essas linguagens usam um compilador para traduzir o código para um código intermediário onde será feita a comunicação entre Humano x Máquina;
As diferenças práticas entre LC e LI são das seguintes linguagens: LC - C, C++, Rust, Go, etc. / LI - JavaScript, Python, Ruby, etc. / LH - C#, Java, Kotlin, etc.

- Prós da Linguagem Interpretada:
	Não precisa ser compilada;
	Correções mais fáceis de serem aplicada;
	Mais simples de serem distribuídas.

- Contras da Linguagem Interpretada:
	Detecção de erros. (Somente em tempo de execução);
	Tamanho final da aplicação maior;
	Menor otimização da execução;
	Multiplos arquivos.

- Prós da Linguagem Compilada:
	Tempo de compilação (detecção mais rápida de erros);
	Tamanho menor das aplicações;
	Maior otimização da execução;
	Apenas um arquivo final.

- Contras da Linguagem Compilada:
	Precisa de compilador;
	Pode ser mais burocrática.
	
#Tipagem de Dados:
Linguagem tipada ou fortemente tipada são linguagens que obrigam que especifiquemos o tipo da informação que será armazenado em qualquer variável, objeto, etc. Sendo assim, um tipo de dado, definindo o formato dele, garantimos e sabemos se a informação se trata de um número, letra, cadeia de caracteres, entre outros. O contrário se aplica para uma linguagem não tipada ou de tipagem fraca.
Uma tipagem de dados forte também nos dá menor liberdade de manipulação do dado e garante uma maior otimização do código.
A tipagem de dados serve para que possamos definir tipos e padronizar dados, tanto para nós quanto para o processador/memória.
Quando tipamos o dado, garantimos que sempre seja alocado em um espaço correto, assim, garantindo e muito uma melhor otimização de processamento e memória alocada para um determinado dado.