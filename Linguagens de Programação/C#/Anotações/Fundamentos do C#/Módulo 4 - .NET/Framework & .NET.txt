# Frameworks:
É uma estrutura, um alicerce para construirmos as aplicações. Sendo assim, um conjunto de bibliotecas.
Usamos como base para construir nossas aplicações para não ser necessário fazer tudo do zero.
O conceito existe em diversas tecnologias, assim como o JavaScript possui o React.JS, SpringBoot, etc.
O .NET é um Framework da Microsoft.
A idéia é trazer recursos comuns já prontos como: itens do dia-a-dia, escrita de arquivo em disco, acesso a dados, etc.
São recursos validados e testados que poupam muito tempo de desenvolvimento, não sendo recomendado começar um projeto sem um.

#.NET Framework:
C# é a linguagem e o Framework se chama .NET.
Teve sua primeira versão em meados de 2001, chamado de .NET Framework.
Recebeu versões 1.0, 1.1, 2.0, 3.0, 3.5, 4.X (atualmente).
Pode ser instalado Side-by-Side, significa que pode ser várias utilizada com várias versões no mesmo ambiente;
Compatível somente com Windows, ou seja, o código só pode ser hospedado em Windows;
Considerado LEGADO.

#.NET Core:
Versão moderna do .NET Framework;
Lançado em meados de 2015;
Veio suportar outros SOs como Linux e Mac, que não eram suportados no .NET Framework.
Suas primeiras versões continham apenas o básico:
	Core dignifica núcleo;
	Mudar um framework usado por milhões não é fácil;
	Foi totalmente reescrito.
		*O .NET Core foi uma reescritura do .NET Framework;
	Ainda assim com ótima retrocompatibilidade.
Versão mais recomendada do .NET Core é a 3.1 +++ (recomendação da Microsoft);
Muitas melhorias de performance.
Versão 1.0, 1.1, 2.0, 2.1, 3.0, 3.1;
Instalação Side-by-Side.

#.NET Standard:
.NET Framework e .NET Core coexistem, podendo ser instalados e utilizados juntos na mesma máquina e no mesmo projeto.
Como garantir que algo que escrevemos roda em ambos? Isso é feito pelo .NET Standard.
O .NET Standard não é um Framework, apenas um contrato, também conhecido como Suface API, que permite essa comunicação integrada entre ambas as bibliotecas, assim, garantindo a compatibilidade do que fora escrito com ambos.

#.NET 5:
Unificação dos Framework;
.NET Core Chegou ao .NET Framework em nível de conteúdo;
Não faz mais sentido ter dois frameworks.

#Realease:
Um release é uma versão nova de um software, framework, entre outros;
O .NET Framework não possuia uma data de lançamento programada;
O .NET Core possuia lançamentos (releases) semestrais;
A partir do .NET 5 e futuros, os lançamentos são anuais.
Existe uma sigla chamada LTS - Long Term Support. Todas as atualizações que possuem essa sigla, são versões que podem e devem ser utilizadas em Produção, para garantir uma melhor manutenção e tempo de vida a aplicação.
Todas as versões do .NET Framework são LTS.
As versões com final 1 do .NET Core são LTS.
A partir do .NET 5 e futuros, por serem versões maiores (Major Version) são LTS.

#Versionamento:
O versionamento de software é definido em Versão Semântica, que é dividida em fases, sendo elas: Alpha, Beta, Release Candidate, Final;
Dividida em três partes: Major, Minor, Patch (Exemplos: 1.1.2);
Major: Pode conter incompativilidade com versões anteriores, chamadas de Breaking Changes;
Minor: Possui mudanças mas é totalmente compatível com versões anteriores, chamadas de Backward COmpatibility;
Patch: Correções de bugs e outros itens simples.
Alpha: ainda não sabe como vão ser as coisas, podendo mudar muita coisa;
Beta: Já tem ideia da estrutura, as coisas coisas ainda podem mudar mas não tanto como na Alpha;
Release Candidate: Candidato a versão final, podendo apenas ter correções de bugs;
Final: Versão final.
Podemos utilizar anotações com:
	Alpha => 0.0.1-a1;
	Beta => 0.0.2-b1;
	Release Candidate => 1.0.0-rc1;
	Final => 1.0.0
Normalmente Alpha e Beta tem versões menores que 1.0.0.

#Runtime e SDK:
O Runtime faz o gerenciamento da aplicação, sendo obrigatório para executar a aplicação;
É dividido em 3 parte, sendo:
	ASP.NET para aplicações Web;
	Desktop para aplicações Desktop;
	.NET Core para qualquer outra aplicação (Console, Batch, Serviço - coisas que não possui interface, por exemplo);
Também possui versões, por isso a versão deve ser compatível com a versão utilizada durante a codificação.
Usado somente para distribuir aplicações, apenas executa.
Tamanho menor, otimizado para execução.

SDK é a sigla para Software Development Kit, que é um kit para desenvolvimento de software;
Possui tudo o que precisamos para criar aplicações;
Já vem com o Runtime integrado;
Não devemos utilizar em produção, mas usamos apenas o Runtime;
É maior que o Runtime, pois já vem com tudo que precisamos.

# Tipos de Projeto
- Toda vez que utilizamos um projeto do tipo Class Library, o resultado final é uma DLL e não possui interface.
- O Console Application é uma aplicação executável (.exe) que roda no terminal/console, podendo apenas executar a aplicação ou receber e/ou armazenar dados de forma a interagir com o usuário.
- Também possui os Projetos Web e Testes:
	- Projetos WEB: ASP.NET Web, ASP.NET MVC, ASP.NET WebAPI;
	- Projetos Testes: Microsoft Tests.
